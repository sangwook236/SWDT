[-] General.
	- Site.
		http://www.cmake.org/

	- Documentation.
		https://cmake.org/documentation/

		Reference:
		https://cmake.org/cmake/help/latest/
		https://cmake.org/cmake/help/latest/manual/cmake-variables.7.html
		https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html
		https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html

		Tutorial:
		https://cmake.org/cmake/help/latest/guide/tutorial/index.html
		https://cmake.org/cmake/help/latest/guide/user-interaction/index.html

		Book:
		https://cmake.org/cmake/help/book/mastering-cmake/

[-] Usage.
	${SWDT_CPP_HOME}/rnd/doc/probabilistic_graphical_model/mocapy_usage_guide.txt

	- cmake.
		https://cmake.org/cmake/help/latest/manual/cmake.1.html

		mkdir build
		cd build

		Generate a project build system:
			cmake ..
			cmake -D CMAKE_PREFIX_PATH=/path/to/3rd_party_lib ..
			cmake -D CMAKE_BUILD_TYPE=Release ..
			cmake -D CMAKE_BUILD_TYPE=Debug ..
			cmake -G Ninja -D BOOST_LIBRARYDIR:PATH=/usr/lib ..
			cmake -G "Visual Studio 17 2022" -T v143 -D BOOST_LIBRARYDIR:PATH=/usr/lib ..
			cmake -G "Unix Makefiles" -D BOOST_LIBRARYDIR:PATH=/usr/lib ..

		Build a project:
			cmake --build . --config Release
			cmake --build ./build --config Release --target all -j 14 --

			make -j4
				The "-j4" is assuming that you have a 4-core CPU.

		Install a project:
			cmake --install /path/to/installed

	- ccmake.
		https://cmake.org/cmake/help/latest/manual/ccmake.1.html
		CMake curses interface.

		ccmake -G Ninja -D BOOST_LIBRARYDIR:PATH=/usr/lib ..
		ccmake -G "Visual Studio 17 2022" -T v143 -D BOOST_LIBRARYDIR:PATH=/usr/lib ..
		ccmake -G "Unix Makefiles" -D BOOST_LIBRARYDIR:PATH=/usr/lib ..

	- cmake-gui.
		https://cmake.org/cmake/help/latest/manual/cmake-gui.1.html

		Windows:
			cmake-gui
		Linux:
			library: cmake-qt-gui
			executable: cmake-gui

	- ctest.
		https://cmake.org/cmake/help/latest/manual/ctest.1.html

	- cpack.
		https://cmake.org/cmake/help/latest/manual/cpack.1.html

[-] Using external library.
	REF [site] >> http://www.cmake.org/Wiki/CMake:How_To_Find_Libraries

	- CMake가 지원하는 library를 사용하는 경우.
		library 찾기 위해 Find???.cmake file 사용.
		${CMAKE_INSTALL}\share\cmake-2.8\Modules에 존재.
	- CMake가 지원하지 않는 library를 사용하는 경우.
		"참고 사이트" 참고.
		==> 개별 source directory에 .cmake 추가.
			${SRC_HOME}/cmake
			e.g.) ${SWL_CPP_HOME}/cmake/FindLog4cxx.cmake

[-] Options.
	- Installation path.
		Change a variable.
			Name: CMAKE_INSTALL_PREFIX
			Type: Path
			Value: D:/usr/local
	- Debug mode postfix.
		REF [site] >> https://cmake.org/pipermail/cmake/2007-September/016177.html
		Add a variable.
			Name: CMAKE_DEBUG_POSTFIX
			Type: String
			Value: d
	- Static/shared library.
		REF [site] >> https://cmake.org/pipermail/cmake/2007-September/016177.html
		Add a variable.
			Name: BUILD_SHARED_LIBS
			Type: Bool
			Name: BUILD_STATIC_LIBS
			Type: Bool
	- GNU to MS.
		REF [site] >> openblas_usage_guide.txt
		Add a variable.
			Name: CMAKE_GNUtoMS_VCVARS
			Type: File
			Value: C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/vcvars32.bat
			Name: CMAKE_GNUtoMS
			Type: Bool
			Value: On

[-] Setting (CMake).
	- Reference.
		${SWDT_CPP_HOME}/rnd/doc/probabilistic_graphical_model/mocapy_usage_guide.txt
		${SWDT_CPP_HOME}/rnd/src/probabilistic_graphical_model/mocapy/Mocapy++-1.07/src/CMakeLists.txt
		${SWDT_CPP_HOME}/rnd/src/hand_analysis/libhand/libhand-0.9/hand_cpp/source/CMakeLists.txt

	- CMake GUI에서 설정된 값은 CMakeCache.txt에 저장됨.
		e.g.)
			${MOCAPY_HOME}/build_mingw/CMakeCache.txt
	- 생성된 CMakeCache.txt file은 building 과정에서 사용됨.
		e.g.)
			${MOCAPY_HOME}/build_mingw/CMakefiles/Makefile.cmake

	- BUILD_STATIC_LIBS를 on으로 설정. (?)
		SET(BUILD_STATIC_LIBS ON) or SET(BUILD_SHARED_LIBS OFF)
	- Building static library을 생성하기 위해서는 아래와 같이 add_library 항목이 추가되어야 함.
		e.g.)
		SET(Library_src1
			src1/file1.cpp
			src1/file2.cpp
		)
		SET(Library_src2
			src2/file1.cpp
			src2/file2.cpp
		)
		add_library (Library_name STATIC
			${Library_src1}
			${Library_src2}
		)
	- BUILD_SHARED_LIBS를 on으로 설정.
		SET(BUILD_SHARED_LIBS ON)
	- Building shared library을 생성하기 위해서는 아래와 같이 add_library 항목이 추가되어야 함.
		e.g.)
		SET(Library_src1
			src1/file1.cpp
			src1/file2.cpp
		)
		SET(Library_src2
			src2/file1.cpp
			src2/file2.cpp
		)
		add_library (Library_name SHARED
			${Library_src1}
			${Library_src2}
		)

[-] Troubleshooting.
	- cmake error and output files.
		${SRC_BUILD_HOME}/CMakeFiles/CMakeError.log
		${SRC_BUILD_HOME}/CMakeFiles/CMakeOutput.log

[-] Troubleshooting (Windows + VC).
	- When the toolset setting option, e.g. "-T v142" does not work.
		<error>
			Failed to run MSBuild command:
			C:/Program Files/Microsoft Visual Studio/2022/Professional/MSBuild/Current/Bin/amd64/MSBuild.exe
			to get the value of VCTargetsPath:
		<cause>
			Platform Toolset version not supported by MSBuild.
		<solution>
			Modify MSBuild.exe.config files.
				Target files:
					C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\amd64\MSBuild.exe.config
						C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\amd64\MSBuild.exe
					C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\MSBuild.exe.config
						C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\MSBuild.exe
				Add the required setting as following below the default Platform Toolset setting:
					e.g.)
						<property name="VCTargetsPath" value="$([MSBuild]::ValueOrDefault('$(VCTargetsPath)','$(MSBuildExtensionsPath32)\Microsoft\VC\v170\'))" />:
							Default Platform Toolset setting.
						<property name="VCTargetsPath16" value="$([MSBuild]::ValueOrDefault('$(VCTargetsPath16)','$(MSBuildExtensionsPath32)\Microsoft\VC\v160\'))" />
							Required setting.
			A project file related to VCTargetsPath:
				${SRC_BUILD_HOME}\CMakeFiles\<CMAKE_VERSION>\VCTargetsPath.vcxproj
